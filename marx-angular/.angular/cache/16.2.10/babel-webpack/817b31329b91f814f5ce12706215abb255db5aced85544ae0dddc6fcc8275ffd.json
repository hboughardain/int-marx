{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = 'http://localhost:8080/api/coherencyReports';\nexport class CoherencyReportService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAllCoherencyReports() {\n    return this.http.get(baseUrl);\n  }\n  getCoherencyReportById(id) {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n  createCoherencyReport(data) {\n    return this.http.post(baseUrl, data);\n  }\n  //TODO: createCoherencyReportsFromFile\n  updateCoherencyReport(id, data) {\n    return this.http.put(`${baseUrl}/${id}`, data);\n  }\n  deleteCoherencyReport(id) {\n    return this.http.delete(`${baseUrl}/${id}`);\n  }\n  deleteAllCoherencyReports() {\n    return this.http.delete(baseUrl);\n  }\n  static #_ = this.ɵfac = function CoherencyReportService_Factory(t) {\n    return new (t || CoherencyReportService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CoherencyReportService,\n    factory: CoherencyReportService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["baseUrl","CoherencyReportService","constructor","http","getAllCoherencyReports","get","getCoherencyReportById","id","createCoherencyReport","data","post","updateCoherencyReport","put","deleteCoherencyReport","delete","deleteAllCoherencyReports","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\bvp0101\\OneDrive - INFRABEL\\Documents\\Marx\\marx-angular\\src\\app\\services\\coherency-report.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CoherencyReport } from '../models/coherency-report.model';\n\nconst baseUrl = 'http://localhost:8080/api/coherencyReports';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CoherencyReportService {\n\n  constructor(private http: HttpClient) { }\n\n  getAllCoherencyReports(): Observable<CoherencyReport[]> {\n      return this.http.get<CoherencyReport[]>(baseUrl);\n  }\n\n  getCoherencyReportById(id: number): Observable<CoherencyReport> {\n      return this.http.get(`${baseUrl}/${id}`);\n  }\n\n  createCoherencyReport(data: any): Observable<any> {\n      return this.http.post(baseUrl, data);\n  }\n\n  //TODO: createCoherencyReportsFromFile\n\n  updateCoherencyReport(id: number, data: any): Observable<any> {\n      return this.http.put(`${baseUrl}/${id}`, data);\n  }\n\n  deleteCoherencyReport(id: number): Observable<any> {\n    return this.http.delete(`${baseUrl}/${id}`);\n  }\n\n  deleteAllCoherencyReports(): Observable<any> {\n    return this.http.delete(baseUrl);\n  }\n}\n"],"mappings":";;AAKA,MAAMA,OAAO,GAAG,4CAA4C;AAK5D,OAAM,MAAOC,sBAAsB;EAEjCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,sBAAsBA,CAAA;IAClB,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAoBL,OAAO,CAAC;EACpD;EAEAM,sBAAsBA,CAACC,EAAU;IAC7B,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAC,GAAGL,OAAO,IAAIO,EAAE,EAAE,CAAC;EAC5C;EAEAC,qBAAqBA,CAACC,IAAS;IAC3B,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAACV,OAAO,EAAES,IAAI,CAAC;EACxC;EAEA;EAEAE,qBAAqBA,CAACJ,EAAU,EAAEE,IAAS;IACvC,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAC,GAAGZ,OAAO,IAAIO,EAAE,EAAE,EAAEE,IAAI,CAAC;EAClD;EAEAI,qBAAqBA,CAACN,EAAU;IAC9B,OAAO,IAAI,CAACJ,IAAI,CAACW,MAAM,CAAC,GAAGd,OAAO,IAAIO,EAAE,EAAE,CAAC;EAC7C;EAEAQ,yBAAyBA,CAAA;IACvB,OAAO,IAAI,CAACZ,IAAI,CAACW,MAAM,CAACd,OAAO,CAAC;EAClC;EAAC,QAAAgB,CAAA,G;qBA5BUf,sBAAsB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAtBpB,sBAAsB;IAAAqB,OAAA,EAAtBrB,sBAAsB,CAAAsB,IAAA;IAAAC,UAAA,EAFrB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}